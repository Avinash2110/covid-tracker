{"version":3,"sources":["apiCalls.js","Components/LiveTable.js","util.js","Components/CountryCard.js","Components/Map.js","App.js","index.js"],"names":["fetchCountryData","fetch","then","response","json","catch","err","console","log","LiveTable","ranking","useState","countryData","setCountryData","getData","data","sortedData","key","sort","a","b","sortData","useEffect","className","map","country","index","CountryCard","props","width","height","chartType","loader","cases","deaths","recovered","options","chart","title","subtitle","colors","Map","lat","long","complete","center","zoom","scrollWheelZoom","TileLayer","attribution","url","CircleMarker","countryInfo","fillColor","color","radius","Math","sqrt","Tooltip","opacity","App","rankingBy","setRankingBy","countryList","setCountryList","setCountry","totalCases","totalDeaths","totalRecovered","todayCases","todayDeaths","todayRecovered","countryStatus","setCountryStatus","setCountryInfo","fullData","setFullData","getCountryStatus","fetchCountryStatus","countries","forEach","push","id","value","onChange","event","target","ceaths","Select","variant","MenuItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4d5e017.chunk.js","sourcesContent":["export const fetchCountryData = () =>{\n    return fetch(`https://disease.sh/v3/covid-19/countries`)\n    .then(response =>{\n        return response.json();\n    })\n    .catch(err => console.log(err));\n}\n\nexport const fetchCountryStatus = (url) =>{\n    return fetch(url)\n    .then(response =>{\n        return response.json();\n    })\n    .catch(err => console.log(err));\n}","import React, {useState, useEffect} from 'react'\nimport {fetchCountryData} from \"../apiCalls\";\nimport {sortData} from \"../util.js\";\nimport \"./LiveTable.css\";\n\nconst LiveTable = ({ranking}) => {\n\n    const [countryData, setCountryData] = useState([]);\n\n    const getData = () =>{\n        fetchCountryData()\n        .then(data =>{\n            const sortedData = sortData(data, ranking);\n            setCountryData(sortedData);\n        })\n    }\n\n    useEffect(()=>{\n        getData();\n    }, [ranking])\n\n    return (\n        <div className=\"table-container\">\n            <table className=\"table\">\n                <tbody className=\"table-body\">\n                    {countryData.map((country, index)=>{\n                        return <tr key={index}>\n                                <td>{country.country}</td>\n                                <td>{country[ranking]}</td>\n                            </tr>\n                    })}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default LiveTable\n","export const sortData = (data, key) =>{\n    const sortedData = [...data];\n    sortedData.sort((a, b) =>{\n        return a[key] > b[key] ? -1 : 1;\n    });\n\n    return sortedData;\n}","import React from 'react'\nimport \"./CountryCard.css\";\nimport { Chart } from \"react-google-charts\";\n\nconst CountryCard = (props) => {\n    return (\n        <div className=\"chart-container\">\n                <Chart\n                    width={'100%'}\n                    height={'100%'}\n                    chartType=\"Bar\"\n                    loader={<div>Loading Chart</div>}\n                        data={[\n                            ['Cases Type', 'Cases', 'Deaths', 'Recovered'],\n                            ['Total', props.cases, props.deaths, props.recovered],\n                        ]}\n                    options={{\n                    // Material design options\n                        chart: {\n                            title: `${props.title} Covid Cases`,\n                            subtitle: 'Cases, Deaths and Recoveries',\n                        },\n                        colors: ['#EDC126', '#BF3325', '#00D84A']\n                    }}\n                />\n        </div>\n    )\n}\n\nexport default CountryCard;\n","import React from 'react'\nimport {Map as LeafletMap, TileLayer, CircleMarker, Tooltip} from \"react-leaflet\";\nimport \"./Map.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst Map = ({lat, long, cases, complete}) => {\n\n    const center = [lat, long];\n\n    return (\n            <LeafletMap className=\"leaflet-container\" \n                center={center} \n                zoom={3} \n                scrollWheelZoom={false}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {complete.map((country, index) =>{\n                    return <CircleMarker key={index}\n                            center={[country?.countryInfo.lat, country?.countryInfo.long]}\n                            fillColor=\"red\"\n                            color=\"red\"\n                            radius={Math.sqrt(country.cases)* 0.013}>\n                            <Tooltip opacity={1}>\n                                <h3>{`Total Cases: ${country.cases}`}</h3>\n                            </Tooltip>\n                        </CircleMarker>\n                })}\n            </LeafletMap>\n    )\n}\n\nexport default Map;\n","import React, {useState, useEffect} from \"react\";\nimport {Select, MenuItem} from \"@material-ui/core\";\nimport \"./App.css\";\nimport LiveTable from \"./Components/LiveTable\";\nimport {fetchCountryData, fetchCountryStatus} from \"./apiCalls\";\nimport CountryCard from \"./Components/CountryCard\";\nimport Map from \"./Components/Map\";\n\nconst App = () =>{\n\n  const [rankingBy, setRankingBy] = useState(\"cases\");\n  const [countryList, setCountryList] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryStatus, setCountryStatus] = useState({\n    totalCases: \"\",\n    totalDeaths: \"\",\n    totalRecovered: \"\",\n    todayCases: \"\",\n    todayDeaths: \"\",\n    todayRecovered: \"\"\n  })\n  const [countryInfo, setCountryInfo] = useState({\n    lat: 20,\n    long: 77,\n  })\n  const [fullData, setFullData] = useState([]);\n\n  const {lat, long} = countryInfo;\n\n  const {totalCases, totalDeaths, totalRecovered, todayCases, todayDeaths, todayRecovered} = countryStatus;\n\n  const handleChange = (event) =>{\n    setRankingBy(event.target.value);\n  }\n\n  const handleCountryChange = (event) =>{\n    setCountry(event.target.value);\n  }\n\n  const getCountries = () =>{\n    fetchCountryData()\n    .then(response =>{\n      setFullData(response);\n      const countries = [];\n      response.forEach(country =>{\n        countries.push(country.country);\n      })\n      setCountryList(countries);\n    })\n  }\n\n  const getCountryStatus = () =>{\n    var url = country === \"worldwide\" ? `https://disease.sh/v3/covid-19/all` : `https://disease.sh/v3/covid-19/countries/${country}`;\n    fetchCountryStatus(url)\n    .then(data =>{\n      setCountryStatus({\n        ...countryStatus,\n        totalCases: data.cases,\n        totalDeaths: data.deaths,\n        totalRecovered: data.recovered,\n        todayCases: data.todayCases,\n        todayDeaths: data.todayDeaths,\n        todayRecovered: data.todayRecovered\n      })\n      if(country!==\"worldwide\"){\n        setCountryInfo({...countryInfo, lat: data.countryInfo.lat, long: data.countryInfo.long});\n      }\n    })\n  }\n\n  useEffect(()=>{\n    getCountries();\n  }, [])\n\n  useEffect(() =>{\n    getCountryStatus();\n  }, [country])\n\n  return(\n    <>\n      <div className=\"app-container\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Covid Tracker</h1>\n        </div>\n        <div className=\"page-divider\">\n          <div className=\"left-container\">\n            <div className=\"country-dropdown-container\">\n              <select id=\"dropdown\" value={country} onChange={handleCountryChange}>\n                <option value=\"worldwide\">Worldwide</option>\n                {countryList.map((country, index) =>{\n                  return <option value={country}>{country}</option>\n                })}\n              </select>\n            </div>\n            <div className=\"country-status-container\">\n                <CountryCard \n                  cases={totalCases}\n                  deaths={totalDeaths}\n                  recovered={totalRecovered}\n                  title=\"Total\"\n                />\n                <CountryCard \n                  cases={todayCases}\n                  ceaths={todayDeaths}\n                  recovered={todayRecovered}\n                  title=\"Today\"\n                />\n            </div>\n            <Map lat={lat} long={long} cases={totalCases} complete={fullData}/>\n          </div>\n          <div className=\"right-container\">\n            <div className=\"right-container-title\">\n              <h3 className=\"ranking-title\">Rankings by: </h3>\n              <Select className=\"ranking-dropdown\" variant=\"outlined\" value={rankingBy} onChange={handleChange}>\n                <MenuItem value=\"cases\">Cases</MenuItem>\n                <MenuItem value=\"deaths\">Deaths</MenuItem>\n                <MenuItem value=\"recovered\">Recovered</MenuItem>\n              </Select>\n            </div>\n            <LiveTable ranking={rankingBy}/>\n          </div>\n        </div>\n      </div>\n      <footer className=\"footer\">\n        <h3 className=\"footer-text\">Made with <span className=\"heart\">&#9829;</span> by Avinash Shukla</h3>\n      </footer>\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}